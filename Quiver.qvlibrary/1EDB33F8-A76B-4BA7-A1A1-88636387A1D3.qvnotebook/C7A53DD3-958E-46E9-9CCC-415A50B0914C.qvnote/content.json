{
  "title": "fonctions anonymes",
  "cells": [
    {
      "type": "markdown",
      "data": "On peut désormais définir une fonction comme une variable."
    },
    {
      "type": "code",
      "language": "php",
      "data": "$f = function($x) {\n  \n}"
    },
    {
      "type": "markdown",
      "data": "$f est une __closure__, elle permet de manipuler notre fonction anonyme."
    },
    {
      "type": "code",
      "language": "php",
      "data": "$x = \"f\";\n$$x; //$f"
    },
    {
      "type": "code",
      "language": "php",
      "data": "$o->p1;\n$o->$p;"
    },
    {
      "type": "markdown",
      "data": "On peut appeler une propriété de manière dynamique."
    },
    {
      "type": "latex",
      "language": "latex",
      "data": "On peut aussi l'appliquer aux méthodes :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "$o->$f(...)"
    },
    {
      "type": "markdown",
      "data": "Utile pour faire une factory."
    },
    {
      "type": "markdown",
      "data": "Exemple intéressant de fonctions anonymes : "
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\nfunction add(int $x, int $y): int\n{\n    return $x + $y;\n}\n\nfunction increment(int $i)\n{\n    return function (int $x) use ($i)\n    {\n        echo (add ($x, $i));\n    };\n}\n\n$plus1 = increment(1);\n$y = $plus1(4);"
    },
    {
      "type": "markdown",
      "data": "Fonctions d'ordre supérieur : array_map, array_filer,  array_reduce."
    },
    {
      "type": "markdown",
      "data": "Exemple de array_map :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "function double($x) {\n    return $x * 2;\n}\n\n$t = [1, 2, 3];\n$t2 = array_map('double', $t);\n//double est un 'callable'\n\nprint_r($t2);"
    },
    {
      "type": "markdown",
      "data": "Dans le cas ci-dessus, on applique la fonction double() à chaque élément de l'array."
    },
    {
      "type": "markdown",
      "data": "array_filter permet de filter un tableau. Exemple :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\n\nfunction pair(int $x) {\n    return ($x % 2) == 0;\n}\n\n$t2 = array_filter([1, 2, 3, 4], 'pair');\nprint_r($t2);\n"
    },
    {
      "type": "markdown",
      "data": "Évalue chaque valeur du tableau array en les passant à la fonction de rappel callback. Si la fonction de rappel callback retourne TRUE, la valeur courante du tableau array est retournée dans le tableau résultant. Les clés du tableau sont préservées."
    },
    {
      "type": "markdown",
      "data": "Voici un exemple de array_reduce :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\n\nfunction sum(?int $acc, int $x) {\n    return $acc += $x;\n}\n\n$result = array_reduce([1, 2, 3, 4], 'sum');\necho $result;\n"
    },
    {
      "type": "markdown",
      "data": "Voici un exemple d'utilisation de fonction anonyme passée en paramètre d'une autre fonction :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "function afficher(string $string, callable $f) {\n    echo $f($string);\n}\n\n$upperString = function ($string) {\n    return strtoupper($string);\n};\n\nafficher('salut', $upperString);"
    },
    {
      "type": "markdown",
      "data": "On peut effectuer des tests sur les classes grâce à la classe générique stdClass."
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}