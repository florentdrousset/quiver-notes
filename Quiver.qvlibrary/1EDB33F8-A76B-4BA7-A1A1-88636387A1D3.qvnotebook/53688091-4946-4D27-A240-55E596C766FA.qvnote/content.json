{
  "title": "Nouvelles syntaxes PHP",
  "cells": [
    {
      "type": "markdown",
      "data": "Nouvelle notation ternaire :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\n$x = $y ?? $z"
    },
    {
      "type": "markdown",
      "data": "Tester relation d’ordre entre y et z :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\n$x = $y <=> $z;"
    },
    {
      "type": "markdown",
      "data": "On peut maintenant utiliser \"const\" pour définir des constantes (au lieu de define())"
    },
    {
      "type": "markdown",
      "data": "Typage des fonctions (permet d'optimiser la recherche des erreurs)"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\nfunction f(string $s, array $t) {\n  \n}"
    },
    {
      "type": "markdown",
      "data": "Le typage statique assure la solidité du programme.\nSi on rajoute un ?, le type peut être nul :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\nfunction f(array? $t) {\n  \n}"
    },
    {
      "type": "markdown",
      "data": "Nouvel opérateur \"spread\", qui est utile si on ne sait pas combien de paramètres on va recevoir. Exemple :"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\nfunction f(... $x) {\n  var_dump($x);\n}\n\nf(1, 2, 3, 4);\n// Renvoie un tableau contenant [1, 2, 3, 4]"
    },
    {
      "type": "code",
      "language": "php",
      "data": "<?php\nlist($a, $b, $c) = f(0); => [1, 2, 3];"
    },
    {
      "type": "text",
      "data": "<p>Générateurs</p>\n"
    },
    {
      "type": "code",
      "language": "php",
      "data": "function f() {\n//dans un générateur, on audddddra un opérateur yield\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nforeach (f() as $value) {\n  echo '\n'. $value;\n}\nd"
    },
    {
      "type": "markdown",
      "data": "Yield stoppe le fonctionnement de la fonction, puis reprend à la ligne d'après la prochaine fois où il est appelé. Il renvoie un objet de type Generator qui peut être parcouru à l'aide d'une boucle. "
    },
    {
      "type": "code",
      "language": "php",
      "data": "function f($end) {\n    $x = 0;\n    $y = 1;\n    while ($end > 0) {\n        $next = $x + $y;\n        $x = $y;\n        $y = $next;\n        yield $next;\n        $end--;\n    }\n}\n\nforeach(f(10) as $value) {\n    echo '<br>'. $value . '</br>';\n}"
    },
    {
      "type": "code",
      "language": "php",
      "data": "$fibonacci = f(10);\necho $fibonacci->current();\n$fibonacci->next();\necho $fibonacci->current()"
    },
    {
      "type": "markdown",
      "data": "Grâce aux générateurs, on peut appeler des méthodes sur l’objet générateur."
    },
    {
      "type": "markdown",
      "data": "Itérateurs"
    },
    {
      "type": "code",
      "language": "php",
      "data": "class I implements Iterator {\n    public function current()\n    {\n        // TODO: Implement current() method.\n    }\n    public function next()\n    {\n        // TODO: Implement next() method.\n    }\n    public function key()\n    {\n        // TODO: Implement key() method.\n    }\n    public function rewind()\n    {\n        // TODO: Implement rewind() method.\n    }\n    public function valid()\n    {\n        // TODO: Implement valid() method.\n    }\n}"
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}